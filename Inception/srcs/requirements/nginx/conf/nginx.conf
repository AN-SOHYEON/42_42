# #접속자수, 동작 프로세스 등 퍼포먼스에 관한 설정


# user	nginx;
# worker_processes	1;

# error_log	/var/log/nginx/error.log warn;
# # nginx의 에러로그가 쌓이는 경로

# pid			/var/run/nginx.pid;
# # nginx의 프로세스 아이디(pid)가 저장되는 경로

# events {
# 	worker_connections	1024;
# 	# Worker Process가 동시에 처리할 수 있는 접속자의 수 (기본: 1024)
# }

# http {
	
# 	include			/etc/nginx/mime.types;
# 	#포함시킬 외부파일을 정의
# 	# mime.types : 파일에 작성되어진 내용들을 현재 파일로 가져오는 것

# 	default_type	application/octet-stream;
# 	# 웹서버의 기본 content-type을 정의

# 	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                       '$status $body_bytes_sent "$http_referer" '
#                       '"$http_user_agent" "$http_x_forwarded_for"';
# 	# 로그형식 지정

# 	access_log		/var/log/nginx/access.log	main;
# 	# 접속 로그가 쌓이는 경로

# 	sendfile		on;
# 	# sendfile()함수의 사용여부 지정 
# 	# sendfile() : 한 파일의 디스크립터와 다른 파일의 디스크립터 간에 데이터를 복사하는 것

# 	keepalive_timeout	65;
# 	# 클라이언트에서 연결이 유지될 시간 정의 (기본 : 65)

	

# 	include			/etc/nginx/conf.d/*.conf;
# 	# 서버 속성이 정의되어져 있는 파일을 포함시킨다.
# 	# /etc/nginx/conf.d에  .conf로 끝나는 파일들을 포함시켜 가져옴
# }


# # [출처] https://phsun102.tistory.com/45





server {
	listen     443 ssl http2;
	listen [::]:443 ssl http2;
	server_name llescure.42.fr;
	root /var/www/html/wordpress;

##
# SSL Settings
##
	ssl on;
	ssl_certificate /etc/ssl/llescure.42.fr.pem;
	ssl_certificate_key /etc/ssl/llescure.42.fr.key;

	index index.php;

	ssl_protocols TLSv1.3;
	ssl_prefer_server_ciphers off;

	location / {
        try_files $uri $uri/ /index.php?$args;
    }

##
#Configuration to work with php and be able to install wordpress
#

location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

##
#Error management
#

	error_log /var/log/nginx/error.log;
	error_page 500 502 503 504 /50x.html;
}



##################################################################

# nginx모듈은 directives에 의해 제어된다.
	# - simple directive
	# - block directive


user	www-data;
# 어떤 사용자가 nginx를 동작시킬지 

worker_processes	auto;
# 몇 개의 스레드가 사용될지 결정
	# - auto로 지정하면 CPU코어 수에 맞게 자동 설정

pid	/run/nginx.pid;
# nginx의 pid가 적혀있는 파일의 경로

include	/etc/nginx/modules-enabled/*.conf;
# 외부 configuration을 가져온다.


# context : 각 block directive는 블록 안에 다른 directive를 가질 수 있다.
# 			- 블록 안의 영역을 context라고 함
events {
# 일반적인 connection process를 담당하며 nginx conf 파엘에는 하나의 events context만 등록될 수 있다.

	worker_connections 768;
	# multi_accept	on;
}

http {
# http연결을 어떻게 다룰지에 대한 내용

	include	/etc/nginx/conf.d/*.conf;
	include	/etc/nginx/sites-enabled/*;

	# include
		- configuration 파일들을 쉽게 관리하기 위해 기능 단위로 파일을 저장하는 것이 좋다.
		- block directive 안에 include를 쓸 경우, 해당 블럭 안에 내용이 포함된다.
	
}

server {
# http context 안에 있는 server context는 특정 도메인이나 IP주소로의 요청을 처리하며 이를 가상 호스트라고 함
# 서버 블록에는 많은 directive를 만들어서 http directive를 무시하고 독자적인 설정들을 할 수 있으며
# server context 내부의 location context에는 특정 URI에 대한 요청을 어떻게 처리할지가 정의된다.

	listen	127.0.0.1:8080;
	# 요청을 처리할 ip주소, 포트, 소켓주소 등을 적는다.
	# 이 값과 일치하는 클라이언트의 요청이 있을때 이블럭을 선택하여 연결을 처리한다.
}

server {
	
	listen	80;
	
	server_name	example.org www.example.org;
	# 도메인 이름등을 적어준다.
	# 클라이언트의 요청을 처리할 수 있는 여러개의 listen directive가 있을 때
	# 	nginx는 요청의 HOST헤더를 분석하여 server_name directive와 일치하는 블록을 선택한다.
}

server {

	location /match/criteria {
		root	/data;
		# root : static file이 있는 파일시스템의 경로
		# root뒤에 location의 경로가 추가된 상태로 파일의 경로를 찾는다.
	}
	# location context : ip와 port를 기준으로 어떤 server블록을 선택할지 결정된 이후 나머지 URI를 기준으로 location블록이 선택되어 클라이언트 요청이 처리된다.

	location /other/criteria {
		location	nested_match {
			proxy_pass http:// www.example.org;
			# 예를 들어 /match/criteria 와 맞지 않는 모든 요청은 프록시 서버로 전송된다.
			# 프록시 서버의 응답이 클라리언트에게 전송됨
			# 프록시패스를 통해서 상위 context의 다른 server 블록에도 접근할 수 있다.
		}
	}
}